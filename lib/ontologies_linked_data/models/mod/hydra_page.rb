module LinkedData
  module Models
    class HydraPage < Goo::Base::Page

      ##
      # Converts the current HydraPage into a Hydra collection hash.
      #
      # This method constructs and returns a hash with Hydra collection properties.
      # The hash includes metadata such as the total number of items, items per page, and
      # a pagination view generated by invoking #generate_hydra_page_view. Each item in the
      # collection is converted to a flexible hash representation via its #to_flex_hash method,
      # which may be further customized by an optional block.
      #
      # @param options [Hash] Options for generating the Hydra view and customizing item conversion.
      # @yield [item] Optional block to customize each item's hash conversion.
      # @return [Hash] A hash representing the Hydra collection.
      def convert_hydra_page(options, &block)
        {
          '@id': 'Collection',
          '@type': 'hydra:Collection',
          totalItems: self.aggregate,
          itemsPerPage: self.size,
          view: generate_hydra_page_view(options, self.page_number, self.total_pages),
          collection: map { |item| item.to_flex_hash(options, &block) }
        }
      end
      
      def self.generate_hydra_context
        {
          'hydra': 'http://www.w3.org/ns/hydra/core#',
          'Collection': 'hydra:Collection',
          'collection': {'@id': 'hydra:member'},
          'totalItems': 'hydra:totalItems',
          'itemsPerPage': 'hydra:itemsPerPage',
          'view': 'hydra:view',
          'firstPage': 'hydra:first',
          'lastPage': 'hydra:last',
          'previousPage': 'hydra:previous',
          'nextPage': 'hydra:next',
        }
      end
      
      private

      ##
      # Generates a Hydra partial collection view for pagination.
      #
      # Constructs a hash containing pagination URLs for a hydra:PartialCollectionView using the
      # current page number, total page count, and the request data provided in the options hash.
      # The method builds URLs for the current page (@id), as well as for the first, previous, next,
      # and last pages, taking into account edge cases where a previous or next page may not exist.
      #
      # @param options [Hash] Options hash that should include a :request key with the current HTTP request.
      # @param page [Integer] The current page number.
      # @param page_count [Integer] The total number of pages available.
      # @return [Hash] A hash with pagination details including:
      #   - :@id: URL for the current page.
      #   - :@type: "hydra:PartialCollectionView".
      #   - :firstPage: URL for the first page.
      #   - :previousPage: URL for the previous page (nil if on the first page).
      #   - :nextPage: URL for the next page (nil if on the last page).
      #   - :lastPage: URL for the last page (defaults to page 1 if page_count is 0).
      def generate_hydra_page_view(options, page, page_count)
        request = options[:request]
        request_path = request ? "#{LinkedData.settings.rest_url_prefix.chomp("/")}#{request.path}" : nil
        params = request ? request.params.dup : {}

        build_url = ->(page_number) {
          query = Rack::Utils.build_nested_query(params.merge("page" => page_number.to_s))
          request_path ? "#{request_path}?#{query}" : "?#{query}"
        }

        {
          "@id": build_url.call(page),
          "@type": "hydra:PartialCollectionView",
          firstPage: build_url.call(1),
          previousPage: page > 1 ? build_url.call(page - 1) : nil,
          nextPage: page < page_count ? build_url.call(page + 1) : nil,
          lastPage: page_count != 0 ? build_url.call(page_count) : build_url.call(1)
        }
      end

    end
  end
end
